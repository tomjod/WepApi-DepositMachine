// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240315182703_AddBrachDetailsAndCashWithdrawal")]
    partial class AddBrachDetailsAndCashWithdrawal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Addresses.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .IsUnique();

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ApiKeys.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .IsUnique();

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("ApiKeys", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Bags.Bag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("CurrentLocation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InstallDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastLocation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RemovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Bags", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BanknoteValidationModules.BanknoteValidationModule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("ManufactureYear")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.HasKey("Id");

                    b.ToTable("BanknoteValidationModules", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Banks.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("integer");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastWithdrawn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("integer");

                    b.Property<int>("WithDrawnAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BranchCashDetails.BranchCashDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastEmptied")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BagId");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchCashDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Branches.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DepositMachineId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastEmptied")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OperationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BranchCode")
                        .IsUnique();

                    b.HasIndex("ClientId");

                    b.HasIndex("DepositMachineId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Branches", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CashBagWithdrawalEvents.CashBagWithdrawalEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BagId");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("CashBagWithdrawalEvents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Representative")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.HasKey("Id");

                    b.HasIndex("Rut")
                        .IsUnique();

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Denominations.Denomination", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Denominations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DepositMachines.DepositMachine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BanknoteValidationModuleId")
                        .HasColumnType("uuid");

                    b.Property<int>("ManufactureYear")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BanknoteValidationModuleId")
                        .IsUnique();

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("DepositMachines", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Deposits.Deposit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPieces")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("Deposits", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Deposits.DepositLineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("DenominationId")
                        .HasColumnType("integer");

                    b.Property<int>("Pieces")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DenominationId");

                    b.HasIndex("TransactionId");

                    b.ToTable("DepositLineItems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Seals.Seal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepositMachineId")
                        .HasColumnType("uuid");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BagId");

                    b.HasIndex("DepositMachineId");

                    b.ToTable("Seals", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Seals.SealDeposit", b =>
                {
                    b.Property<Guid>("SealId")
                        .HasColumnType("uuid");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("SealId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("SealDeposits", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Users.UserBranch", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("UserBranch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<Domain.Entities.Users.UserId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<Domain.Entities.Users.UserId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<Domain.Entities.Users.UserId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<Domain.Entities.Users.UserId>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<Domain.Entities.Users.UserId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<Domain.Entities.Users.UserId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Domain.Entities.Addresses.Address", b =>
                {
                    b.HasOne("Domain.Entities.Branches.Branch", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Addresses.Address", "BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ApiKeys.ApiKey", b =>
                {
                    b.HasOne("Domain.Entities.Branches.Branch", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.ApiKeys.ApiKey", "BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Banks.Bank", b =>
                {
                    b.HasOne("Domain.Entities.Branches.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.BranchCashDetails.BranchCashDetails", b =>
                {
                    b.HasOne("Domain.Entities.Bags.Bag", null)
                        .WithMany()
                        .HasForeignKey("BagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Branches.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Cash", "CurrentValue", b1 =>
                        {
                            b1.Property<Guid>("BranchCashDetailsId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Amount")
                                .HasMaxLength(9)
                                .HasColumnType("integer")
                                .HasColumnName("CurrentAmount");

                            b1.Property<int>("Pieces")
                                .HasMaxLength(5)
                                .HasColumnType("integer")
                                .HasColumnName("CurrentPieces");

                            b1.HasKey("BranchCashDetailsId");

                            b1.ToTable("BranchCashDetails");

                            b1.WithOwner()
                                .HasForeignKey("BranchCashDetailsId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Cash", "LastValue", b1 =>
                        {
                            b1.Property<Guid>("BranchCashDetailsId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Amount")
                                .HasMaxLength(9)
                                .HasColumnType("integer")
                                .HasColumnName("AmountSinceLastEmptied");

                            b1.Property<int>("Pieces")
                                .HasMaxLength(5)
                                .HasColumnType("integer")
                                .HasColumnName("PiecesSinceLastEmptied ");

                            b1.HasKey("BranchCashDetailsId");

                            b1.ToTable("BranchCashDetails");

                            b1.WithOwner()
                                .HasForeignKey("BranchCashDetailsId");
                        });

                    b.Navigation("CurrentValue")
                        .IsRequired();

                    b.Navigation("LastValue")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Branches.Branch", b =>
                {
                    b.HasOne("Domain.Entities.Clients.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DepositMachines.DepositMachine", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Branches.Branch", "DepositMachineId");
                });

            modelBuilder.Entity("Domain.Entities.CashBagWithdrawalEvents.CashBagWithdrawalEvent", b =>
                {
                    b.HasOne("Domain.Entities.Bags.Bag", null)
                        .WithMany()
                        .HasForeignKey("BagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Branches.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Cash", "Cash", b1 =>
                        {
                            b1.Property<Guid>("CashBagWithdrawalEventId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Amount")
                                .HasMaxLength(9)
                                .HasColumnType("integer")
                                .HasColumnName("TotalAmount");

                            b1.Property<int>("Pieces")
                                .HasMaxLength(5)
                                .HasColumnType("integer")
                                .HasColumnName("TotalPieces");

                            b1.HasKey("CashBagWithdrawalEventId");

                            b1.ToTable("CashBagWithdrawalEvents");

                            b1.WithOwner()
                                .HasForeignKey("CashBagWithdrawalEventId");
                        });

                    b.Navigation("Cash")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Denominations.Denomination", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Banknote", "Banknotes", b1 =>
                        {
                            b1.Property<int>("DenominationId")
                                .HasColumnType("integer");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)");

                            b1.Property<string>("DenomName")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("character varying(9)");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("DenominationId");

                            b1.ToTable("Denominations");

                            b1.WithOwner()
                                .HasForeignKey("DenominationId");
                        });

                    b.Navigation("Banknotes")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.DepositMachines.DepositMachine", b =>
                {
                    b.HasOne("Domain.Entities.BanknoteValidationModules.BanknoteValidationModule", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.DepositMachines.DepositMachine", "BanknoteValidationModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Deposits.Deposit", b =>
                {
                    b.HasOne("Domain.Entities.Branches.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Deposits.DepositLineItem", b =>
                {
                    b.HasOne("Domain.Entities.Denominations.Denomination", null)
                        .WithMany()
                        .HasForeignKey("DenominationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Deposits.Deposit", null)
                        .WithMany("DepositLineItem")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Seals.Seal", b =>
                {
                    b.HasOne("Domain.Entities.Bags.Bag", null)
                        .WithMany()
                        .HasForeignKey("BagId");

                    b.HasOne("Domain.Entities.DepositMachines.DepositMachine", null)
                        .WithMany()
                        .HasForeignKey("DepositMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Seals.SealDeposit", b =>
                {
                    b.HasOne("Domain.Entities.Seals.Seal", null)
                        .WithMany()
                        .HasForeignKey("SealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Deposits.Deposit", null)
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Users.UserBranch", b =>
                {
                    b.HasOne("Domain.Entities.Branches.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Deposits.Deposit", b =>
                {
                    b.Navigation("DepositLineItem");
                });
#pragma warning restore 612, 618
        }
    }
}
